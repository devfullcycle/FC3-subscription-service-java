plugins {
    id 'java-conventions'
    id 'jacoco-report-aggregation'
    id 'application'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group 'com.fullcycle.codeflix.subscription.infrastructure'

bootJar {
    archiveFileName = 'application.jar'
    destinationDirectory.set(file("${rootProject.buildDir}/libs"))
}

ext {
    cache2k = "2.6.1.Final"
}

dependencies {
    implementation(project(":domain"))
    implementation(project(":application"))

    implementation("com.google.guava:guava:33.0.0-jre")

    implementation("com.fasterxml.jackson.module:jackson-module-afterburner")

    implementation("io.github.resilience4j:resilience4j-spring-boot3")
    implementation("io.github.resilience4j:resilience4j-bulkhead")
    implementation("io.github.resilience4j:resilience4j-circuitbreaker")
    implementation("io.github.resilience4j:resilience4j-retry")

    implementation("org.springdoc:springdoc-openapi-webmvc-core:1.7.0")
    implementation("org.springdoc:springdoc-openapi-ui:1.7.0")

    implementation('com.mysql:mysql-connector-j')

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation('org.springframework.boot:spring-boot-starter-data-jdbc')
    implementation("org.springframework.boot:spring-boot-starter-undertow")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    testImplementation(project(path: ':domain', configuration: 'testClasses'))

    testImplementation('org.flywaydb:flyway-core')
    testImplementation('org.flywaydb:flyway-mysql')

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation("org.springframework.cloud:spring-cloud-contract-wiremock")
    testImplementation("org.springframework.graphql:spring-graphql-test")
    testImplementation("org.springframework.kafka:spring-kafka-test")
    testImplementation("org.springframework.security:spring-security-test")

    testImplementation("org.testcontainers:testcontainers:1.18.3")
    testImplementation('org.testcontainers:mysql:1.17.6')
    testImplementation("org.testcontainers:junit-jupiter:1.18.3")

    testRuntimeOnly('com.h2database:h2')
}

dependencyManagement {
    imports {
        mavenBom "io.github.resilience4j:resilience4j-bom:2.2.0"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
    }
}

testCodeCoverageReport {
    reports {
        xml.required = true
        xml.outputLocation = file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml")

        html.required = true
        html.outputLocation = file("$rootDir/build/reports/jacoco/test/")
    }
}

tasks.named("jacocoTestReport") {
    dependsOn tasks.named("testCodeCoverageReport", JacocoReport)
}